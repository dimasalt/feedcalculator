'use client';

import '../../../public/assets/bootstrap/css/bootstrap.min.css';
import '../../../public/assets/bootstrap-icons-1.10.3/bootstrap-icons.css';
import '../globals.css';

//components
import AdgDropdown from '@/components/dropdowns/AdgDropDown';
import StartWeightDropDown from '@/components/dropdowns/StartWeightDropDown';

import { useEffect, useRef, useState } from "react";
import EndWeightDropDown from '@/components/dropdowns/EndWeightDropDown';


export default function Home() {

    // average daily gain (ADG)
    const [adgs, setAdg] = useState<any[]>([]);   
    const selectedAdg = useRef<string>('0');

    //start weight 
    const [startWeight, setStartWeights] = useState<any[]>([]);
    const selectedStartWeight = useRef<string>('200');

    //end weight
    const [endWeight, setEndWeights] = useState<any[]>([]);
    const selectedEndWeight = useRef<string>('400');

    //rations for the selected daily rations/messures
    const [ration, setRation] = useState<any[]>([]);


    useEffect(() => {
        getAdgs();
        getWeights();

        getRation();

    }, []);  

    // <!-- getting list of available adgs for the drop down -->
    const getAdgs = async () => {
        const postData = {
            method: 'POST',
            Headers: {
                'Content-Type': 'application/json',
                'API-Key': process.env.DATA_API_KEY
            },
            body: JSON.stringify({})  
        }
        const res = await fetch('/api/rations/adgs', postData);

        if (!res.ok) {
            // This will activate the closest `error.js` Error Boundary
            throw new Error('Failed to fetch data');
        }      
        
        const response = await res.json();
        
        setAdg(response.data[0]);
    }

    const getWeights = async () => {
        const postData = {
            method: 'POST',
            Headers: {
                'Content-Type': 'application/json',
                'API-Key': process.env.DATA_API_KEY
            },
            body: JSON.stringify({})  
        }
        const res = await fetch('/api/rations/weights', postData);

        if (!res.ok) {
            // This will activate the closest `error.js` Error Boundary
            throw new Error('Failed to fetch data');
        }      
        
        const response = await res.json();
        
  
        /** <!-- set all weights -->
         *  start weight full list and default selected start weight for the drop down
         */
        setStartWeights(response.data[0]);         
        selectedStartWeight.current = response.data[0][0].weight 

        // end weight and default selected end weight for the drop down
        setEndWeights(response.data[0]);     

        let lastIndex: number = response.data[0].length - 1;  
        selectedEndWeight.current = response.data[0][lastIndex].weight;
    }

    const getRation = async () =>
    {
        const postData = {
            method: 'POST',
            Headers: {
                'Content-Type': 'application/json',
                'API-Key': process.env.DATA_API_KEY
            },
            body: JSON.stringify({
                adg: selectedAdg.current,
                startWeight: selectedStartWeight.current,
                endWeight : selectedEndWeight.current
            })  
        }

        const res = await fetch('/api/rations/feedintake', postData);

        if (!res.ok) {
            // This will activate the closest `error.js` Error Boundary
            throw new Error('Failed to fetch data');
        }      
        
        const response = await res.json();
        setRation(response.data[0]);
    }
    

    //change selected ADG
    const onAdgChange = (value:string) => {
        selectedAdg.current = value;

        getRation();

    }

    //change selected weight
    const onWeightChange = (value:string, number: number) => {
        
        if(number === 1) // start weight
            selectedStartWeight.current = value;
        
        if(number === 2) //end weight
            selectedEndWeight.current = value;

        getRation();
    }

    return (      
        <div className=" container">
            {/* <!-- Page name and Search and sort options --> */}
            <div className="row g-0 mt-3 border-bottom flex">
                <div className="col-9">
                    <h2 className="text-dark">Ration Requirements</h2>
                </div>
                <div className="col-1">
                    <AdgDropdown selectedAdgValue={selectedAdg.current} 
                        onAdgChange={onAdgChange} adgs={adgs} />


                    {/* <select
                        defaultValue={selectedAdg.current} 
                        className="form-select rounded-0 form-select-sm shadow-sm"
                        aria-label="Select adg"                       
                        onChange={(e) => onAdgChange(e.target.value)}>
                        
                        <option value='0' label="">ADG</option>
                        {adgs.map((item) => {
                            return(
                                <option key={item.adg} value={item.adg}>{item.adg}</option>
                            )
                        })}

                    </select> */}
                </div>
                <div className="col-1 justify-content-end">
                    <StartWeightDropDown selectedStartWeightValue={selectedStartWeight.current} 
                        onWeightChange={onWeightChange} startWeight={startWeight} />
                    {/* <select
                        defaultValue={selectedStartWeight.current} 
                        className="form-select rounded-0 form-select-sm shadow-sm"
                        aria-label="Select weight"                       
                        onChange={(e) => onWeightChange(e.target.value, 1)}>

                        <option value='200' label="">Start Weight</option>                     
                        {startWeight.map((item) => {
                            return(
                                <option key={item.weight} value={item.weight}>{item.weight}</option>
                            )
                        })}

                    </select> */}
                </div>    
                <div className="col-1 justify-content-end">
                    <EndWeightDropDown selectedEndWeightValue={selectedEndWeight.current} 
                        onWeightChange={onWeightChange} endWeight={endWeight} />
                    {/* <select
                        defaultValue={selectedEndWeight.current} 
                        className="form-select rounded-0 form-select-sm shadow-sm"
                        aria-label="Select weight"                       
                        onChange={(e) => onWeightChange(e.target.value, 2)}>
                                               
                        <option value='200' label="">Finish Weight</option>                                    
                        {endWeight.map((item) => {
                            return(
                                <option key={item.weight} value={item.weight}>{item.weight}</option>
                            )
                        })}

                    </select> */}
                </div>                          
            </div>

            {/* <!-- table to display information --> */}
            <div className="row mt-4">
                <div className="col-12">
                    <div className=' text-black float-end'>* All weights calculated in lbs</div>
                    <table className="table tabse-sm table-striped shadow-sm fs-5">
                        <thead>
                            <tr>
                                <th scope="col" className="fs-5">Weight</th>
                                <th scope="col" className="fs-5">Animal Type</th>
                                <th scope="col" className="fs-5">Average Daily Gain (ADG)</th>
                                <th scope="col" className="fs-5">CP %</th>
                                <th scope="col" className="fs-5">TDN %</th>
                                <th scope="col" className="fs-5">Dry Matter Per Day</th>
                            </tr>
                        </thead>
                        <tbody>
                            {ration.map((item) => {
                                return(
                                    <tr key={item.id}>
                                        <td className=' bg-white text-black fs-6'>{item.weight}</td>
                                        <td className=' bg-white text-black fs-6'>{item.animal_type }</td>
                                        <td className=' bg-white text-black fs-6'>{item.adg}</td>
                                        <td className=' bg-white text-black fs-6'>{item.cp }</td>
                                        <td className=' bg-white text-black fs-6'>{item.tdn}</td>
                                        <td className=' bg-white text-black fs-6'>{item.dm_per_day}</td>
                                    </tr>                                    
                                )
                            })}                       
                        </tbody>
                    </table>
                </div>
            </div>     
        </div>
    );
  }